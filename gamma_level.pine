//@version=5
indicator("Gamma Levels", overlay=true)

// 定義顏色
var color IMPLIED_PLUS_COLOR = color.new(#FF0000, 0)     // 紅色
var color IMPLIED_MINUS_COLOR = color.new(#0000FF, 0)    // 藍色
var color GAMMA_FLIP_COLOR = color.new(#00FF00, 0)       // 綠色
var color GAMMA_FIELD_COLOR = color.new(#FFA500, 0)      // 橙色
var color PUT_WALL_COLOR = color.new(#800080, 0)         // 紫色
var color CALL_WALL_COLOR = color.new(#008080, 0)        // 青色
var color DELTA_COLOR = color.new(#FF00FF, 0)            // 粉紅色
var color PUT_DOMINATE_COLOR = color.new(#FF4500, 0)     // 橘紅色
var color CALL_DOMINATE_COLOR = color.new(#4169E1, 0)    // 皇家藍
var color LARGE_GAMMA_COLOR = color.new(#FFD700, 0)      // 金色

// 使用者輸入
inputData = input.text_area(title="輸入價位資料", defval="", group="資料輸入")

// 顯示設定
var string GROUP_DISPLAY = "顯示設定"
showLabels = input.bool(title="顯示標籤", defval=true, group=GROUP_DISPLAY)
lineWidth = input.int(title="線條寬度", defval=1, minval=1, maxval=4, group=GROUP_DISPLAY)
leftExtend = input.int(title="左延伸長度", defval=50, minval=1, maxval=500, group=GROUP_DISPLAY)

// 警報設定
var string GROUP_ALERTS = "警報設定"
alertPutDominate = input.bool(title="Put Dominate 警報", defval=false, group=GROUP_ALERTS)
alertCallDominate = input.bool(title="Call Dominate 警報", defval=false, group=GROUP_ALERTS)
alertGammaFlip = input.bool(title="Gamma Flip 警報", defval=false, group=GROUP_ALERTS)
alertPutWall = input.bool(title="Put Wall 警報", defval=false, group=GROUP_ALERTS)
alertCallWall = input.bool(title="Call Wall 警報", defval=false, group=GROUP_ALERTS)

// 初始化陣列
var float[] prices = array.new_float(0)
var string[] labels = array.new_string(0)
var color[] colors = array.new_color(0)

// 用於追踪警報狀態
var string[] alertedSymbols = array.new_string(0)
var string[] alertedTypes = array.new_string(0)
var string[] alertedDays = array.new_string(0)
var string lastDay = na

// 函數：檢查是否已經發出過警報
hasAlerted(symbol, levelName, currentDay) =>
    size = array.size(alertedSymbols)
    result = false
    if size > 0
        for i = 0 to size - 1
            if array.get(alertedSymbols, i) == symbol and 
               array.get(alertedTypes, i) == levelName and 
               array.get(alertedDays, i) == currentDay
                result := true
                break
    result

// 函數：獲取主要類型的顏色
getPrimaryColor(levelName) =>
    if str.contains(levelName, "Implied Movement +")
        IMPLIED_PLUS_COLOR
    else if str.contains(levelName, "Implied Movement -")
        IMPLIED_MINUS_COLOR
    else if str.contains(levelName, "Gamma Flip")
        GAMMA_FLIP_COLOR
    else if str.contains(levelName, "Gamma Field")
        GAMMA_FIELD_COLOR
    else if str.contains(levelName, "Put Wall")
        PUT_WALL_COLOR
    else if str.contains(levelName, "Call Wall")
        CALL_WALL_COLOR
    else if str.contains(levelName, "Key Delta")
        DELTA_COLOR
    else if str.contains(levelName, "Put Dominate")
        PUT_DOMINATE_COLOR
    else if str.contains(levelName, "Call Dominate")
        CALL_DOMINATE_COLOR
    else if str.contains(levelName, "Large Gamma")
        LARGE_GAMMA_COLOR
    else
        color.gray

// 函數：將簡寫轉換為完整名稱
getFullLevelName(shortName) =>
    if shortName == "IM2-"
        "Implied Movement -2σ"
    else if shortName == "IM-"
        "Implied Movement -σ"
    else if shortName == "IM+"
        "Implied Movement +σ"
    else if shortName == "IM2+"
        "Implied Movement +2σ"
    else if shortName == "GF"
        "Gamma Flip"
    else if shortName == "GFCE"
        "Gamma Flip CE"
    else if shortName == "GFL"
        "Gamma Field"
    else if shortName == "GFLCE"
        "Gamma Field CE"
    else if shortName == "PW"
        "Put Wall"
    else if shortName == "PWCE"
        "Put Wall CE"
    else if shortName == "CW"
        "Call Wall"
    else if shortName == "CWCE"
        "Call Wall CE"
    else if shortName == "KD"
        "Key Delta"
    else if shortName == "KDCE"
        "Key Delta CE"
    else if shortName == "PD"
        "Put Dominate"
    else if shortName == "PDCE"
        "Put Dominate CE"
    else if shortName == "CD"
        "Call Dominate"
    else if shortName == "CDCE"
        "Call Dominate CE"
    else if shortName == "LG"
        "Large Gamma"
    else if shortName == "LGCE"
        "Large Gamma CE"
    else
        shortName  // 如果找不到對應的代碼，直接返回原始代碼

// 在每個 bar 更新時處理數據
if barstate.islast and str.length(inputData) > 0
    // 清空陣列
    array.clear(prices)
    array.clear(labels)
    array.clear(colors)
    
    // 每天開始時清空警報記錄
    currentDay = str.tostring(year) + str.tostring(month) + str.tostring(dayofmonth)
    if lastDay != currentDay
        array.clear(alertedSymbols)
        array.clear(alertedTypes)
        array.clear(alertedDays)
        lastDay := currentDay
    
    // 獲取當前商品代號
    symbol = syminfo.ticker
    
    if str.length(symbol) > 0
        lines = str.split(inputData, "\n")
        linesSize = array.size(lines)
        
        if linesSize > 0
            for i = 0 to linesSize - 1
                line = array.get(lines, i)
                // 使用正則表達式確保完全匹配股票代碼
                if str.match(line, "^" + symbol + ":") != ""
                    // 提取符號後的數據
                    data = str.replace(line, symbol + ":", "")
                    
                    // 處理新的簡寫格式
                    // 使用正則表達式找出所有的 level=price 對
                    // 例如：KD=5000.0IM2-=5748.21IM-=5804.89PD=5890.0
                    
                    // 分割成多個 level=price 對
                    levelPairs = str.split(data, "=")
                    pairsSize = array.size(levelPairs)
                    
                    if pairsSize > 1  // 至少需要一個完整的 level=price 對
                        for j = 0 to pairsSize - 2
                            // 提取 level 和 price
                            levelPartStr = array.get(levelPairs, j)  // 明確獲取字符串
                            pricePartStr = array.get(levelPairs, j + 1)  // 明確獲取字符串
                            
                            // 處理最後一個價格部分可能包含下一個 level 的情況
                            priceEndPos = 0
                            for k = 0 to str.length(pricePartStr) - 1
                                char = str.substring(pricePartStr, k, k + 1)
                                if str.contains("0123456789.", char)
                                    priceEndPos := k + 1
                                else
                                    break
                            
                            price = str.tonumber(str.substring(pricePartStr, 0, priceEndPos))
                            
                            // 處理多個 level 共享同一個價格的情況
                            // 例如：GF,GFCE,PW,PWCE=5900.0
                            multiLevels = str.split(levelPartStr, ",")
                            
                            for level in multiLevels
                                // 跳過第一個元素為空的情況
                                if str.length(level) > 0
                                    // 將簡寫轉換為完整名稱
                                    fullLevelName = getFullLevelName(level)
                                    
                                    if not na(price)
                                        array.push(prices, price)
                                        array.push(labels, fullLevelName)
                                        array.push(colors, getPrimaryColor(fullLevelName))
                            
                            // 如果不是最後一個價格部分，且包含下一個 level
                            if j < pairsSize - 2 and priceEndPos < str.length(pricePartStr)
                                array.set(levelPairs, j + 1, str.substring(pricePartStr, priceEndPos))

    // 繪製所有線條和標籤
    arraySize = array.size(prices)
    if arraySize > 0
        var map<float, string> priceLabels = map.new<float, string>()
        map.clear(priceLabels)
        
        // 先將相同價格的等級名稱組合在一起
        for i = 0 to arraySize - 1
            price = array.get(prices, i)
            levelName = array.get(labels, i)
            
            if map.contains(priceLabels, price)
                existingLabel = map.get(priceLabels, price)
                map.put(priceLabels, price, existingLabel + " & " + levelName)
            else
                map.put(priceLabels, price, levelName)
        
        // 繪製線條和標籤
        priceArray = map.keys(priceLabels)
        for price in priceArray
            combinedLabel = map.get(priceLabels, price)
            labels = str.split(combinedLabel, " & ")
            
            // 只繪製一條線，使用第一個標籤的顏色
            firstLabel = array.get(labels, 0)
            firstColor = getPrimaryColor(firstLabel)
            
            // 繪製線條
            line.new(bar_index[leftExtend], price, bar_index + 2, price, 
                 color=firstColor,
                 style=line.style_solid,
                 width=lineWidth)
            
            // 繪製標籤
            if showLabels
                // 在線的左邊顯示組合的等級名稱
                label.new(bar_index - 2, price + (price * 0.0002),
                     text=combinedLabel, 
                     color=color.new(color.black, 90),
                     style=label.style_label_left,
                     textcolor=firstColor,
                     size=size.large,
                     textalign=text.align_right)
                
                // 在線的右邊顯示價格
                label.new(bar_index + 2, price + (price * 0.0002),
                     text=str.tostring(price, "#.##"), 
                     color=color.new(color.black, 90),
                     style=label.style_label_right,
                     textcolor=firstColor,
                     size=size.large,
                     textalign=text.align_left)

    // 檢查警報條件
    if arraySize > 0
        for i = 0 to arraySize - 1
            price = array.get(prices, i)
            levelName = array.get(labels, i)
            
            if math.abs(close - price) <= (price * 0.001)  // 當價格在0.1%範圍內時
                if not hasAlerted(symbol, levelName, currentDay)
                    alertMessage = ""
                    shouldAlert = false
                    
                    if str.contains(levelName, "Put Dominate") and alertPutDominate
                        alertMessage := "股票 " + symbol + " 價格觸及 Put Dominate 水平"
                        shouldAlert := true
                    else if str.contains(levelName, "Call Dominate") and alertCallDominate
                        alertMessage := "股票 " + symbol + " 價格觸及 Call Dominate 水平"
                        shouldAlert := true
                    else if str.contains(levelName, "Gamma Flip") and alertGammaFlip
                        alertMessage := "股票 " + symbol + " 價格觸及 Gamma Flip 水平"
                        shouldAlert := true
                    else if str.contains(levelName, "Put Wall") and alertPutWall
                        alertMessage := "股票 " + symbol + " 價格觸及 Put Wall 水平"
                        shouldAlert := true
                    else if str.contains(levelName, "Call Wall") and alertCallWall
                        alertMessage := "股票 " + symbol + " 價格觸及 Call Wall 水平"
                        shouldAlert := true
                        
                    if shouldAlert
                        alert(alertMessage + ": " + str.tostring(price), alert.freq_once_per_bar)
                        array.push(alertedSymbols, symbol)
                        array.push(alertedTypes, levelName)
                        array.push(alertedDays, currentDay)
